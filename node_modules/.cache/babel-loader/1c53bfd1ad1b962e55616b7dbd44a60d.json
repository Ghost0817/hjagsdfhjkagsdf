{"ast":null,"code":"import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/autofill.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Options to pass to the animationstart listener.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n\nclass AutofillMonitor {\n  /**\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  constructor(_platform, _ngZone) {\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._monitoredElements = new Map();\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n\n\n  monitor(elementOrRef) {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n    /** @type {?} */\n\n\n    const element = coerceElement(elementOrRef);\n    /** @type {?} */\n\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      return info.subject.asObservable();\n    }\n    /** @type {?} */\n\n\n    const result = new Subject();\n    /** @type {?} */\n\n    const cssClass = 'cdk-text-field-autofilled';\n    /** @type {?} */\n\n    const listener =\n    /** @type {?} */\n\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n\n        this._ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => result.next({\n          target:\n          /** @type {?} */\n          event.target,\n          isAutofilled: true\n        }));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n\n        this._ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => result.next({\n          target:\n          /** @type {?} */\n          event.target,\n          isAutofilled: false\n        }));\n      }\n    };\n\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten:\n      /**\n      * @return {?}\n      */\n      () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n\n\n  stopMonitoring(elementOrRef) {\n    /** @type {?} */\n    const element = coerceElement(elementOrRef);\n    /** @type {?} */\n\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n\n      this._monitoredElements.delete(element);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach(\n    /**\n    * @param {?} _info\n    * @param {?} element\n    * @return {?}\n    */\n    (_info, element) => this.stopMonitoring(element));\n  }\n\n}\n\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n  return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n/** @nocollapse */\n\n\nAutofillMonitor.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: NgZone\n}];\n/** @nocollapse */\n\n\nAutofillMonitor.ɵprov = ɵɵdefineInjectable({\n  factory: function AutofillMonitor_Factory() {\n    return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone));\n  },\n  token: AutofillMonitor,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  AutofillMonitor.prototype._monitoredElements;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AutofillMonitor.prototype._platform;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AutofillMonitor.prototype._ngZone;\n}\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\n\n\nclass CdkAutofill {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _autofillMonitor\n   */\n  constructor(_elementRef, _autofillMonitor) {\n    this._elementRef = _elementRef;\n    this._autofillMonitor = _autofillMonitor;\n    /**\n     * Emits when the autofill state of the element changes.\n     */\n\n    this.cdkAutofill = new EventEmitter();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => this.cdkAutofill.emit(event));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n\n}\n\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n  return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n};\n\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAutofill,\n  selectors: [[\"\", \"cdkAutofill\", \"\"]],\n  outputs: {\n    cdkAutofill: \"cdkAutofill\"\n  }\n});\n/** @nocollapse */\n\nCdkAutofill.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: AutofillMonitor\n}];\n\nCdkAutofill.propDecorators = {\n  cdkAutofill: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAutofill]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: AutofillMonitor\n    }];\n  }, {\n    cdkAutofill: [{\n      type: Output\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * Emits when the autofill state of the element changes.\n   * @type {?}\n   */\n  CdkAutofill.prototype.cdkAutofill;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAutofill.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAutofill.prototype._autofillMonitor;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/autosize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n\n\nclass CdkTextareaAutosize {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _platform\n   * @param {?} _ngZone\n   * @param {?=} document\n   */\n  constructor(_elementRef, _platform, _ngZone,\n  /** @breaking-change 11.0.0 make document required */\n  document) {\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._destroyed = new Subject();\n    this._enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n\n    this._previousMinRows = -1;\n    this._document = document;\n    this._textareaElement =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n    this._measuringClass = _platform.FIREFOX ? 'cdk-textarea-autosize-measuring-firefox' : 'cdk-textarea-autosize-measuring';\n  }\n  /**\n   * Minimum amount of rows in the textarea.\n   * @return {?}\n   */\n\n\n  get minRows() {\n    return this._minRows;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set minRows(value) {\n    this._minRows = coerceNumberProperty(value);\n\n    this._setMinHeight();\n  }\n  /**\n   * Maximum amount of rows in the textarea.\n   * @return {?}\n   */\n\n\n  get maxRows() {\n    return this._maxRows;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set maxRows(value) {\n    this._maxRows = coerceNumberProperty(value);\n\n    this._setMaxHeight();\n  }\n  /**\n   * Whether autosizing is enabled or not\n   * @return {?}\n   */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set enabled(value) {\n    value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n  /**\n   * Sets the minimum height of the textarea as determined by minRows.\n   * @return {?}\n   */\n\n\n  _setMinHeight() {\n    /** @type {?} */\n    const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight) {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n  /**\n   * Sets the maximum height of the textarea as determined by maxRows.\n   * @return {?}\n   */\n\n\n  _setMaxHeight() {\n    /** @type {?} */\n    const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        const window = this._getWindow();\n\n        fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(this._destroyed)).subscribe(\n        /**\n        * @return {?}\n        */\n        () => this.resizeToFitContent(true));\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   * @private\n   * @return {?}\n   */\n\n\n  _cacheTextareaLineHeight() {\n    if (this._cachedLineHeight) {\n      return;\n    } // Use a clone element because we have to override some styles.\n\n    /** @type {?} */\n\n\n    let textareaClone =\n    /** @type {?} */\n    this._textareaElement.cloneNode(false);\n\n    textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n    textareaClone.style.overflow = 'hidden';\n\n    /** @type {?} */\n    this._textareaElement.parentNode.appendChild(textareaClone);\n\n    this._cachedLineHeight = textareaClone.clientHeight;\n\n    /** @type {?} */\n    this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n    this._setMinHeight();\n\n    this._setMaxHeight();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n  /**\n   * Resize the textarea to fit its content.\n   * @param {?=} force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   * @return {?}\n   */\n\n\n  resizeToFitContent(force = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n\n\n    if (!this._cachedLineHeight) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const textarea =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n    /** @type {?} */\n\n    const value = textarea.value; // Only resize if the value or minRows have changed since these calculations can be expensive.\n\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const placeholderText = textarea.placeholder; // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n\n    textarea.classList.add(this._measuringClass);\n    textarea.placeholder = ''; // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n\n    /** @type {?} */\n\n    const height = textarea.scrollHeight - 4; // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n    textarea.style.height = `${height}px`;\n    textarea.classList.remove(this._measuringClass);\n    textarea.placeholder = placeholderText;\n\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(\n        /**\n        * @return {?}\n        */\n        () => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n  /**\n   * Resets the textarea to its original size\n   * @return {?}\n   */\n\n\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  } // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n\n  /**\n   * @return {?}\n   */\n\n\n  _noopInputHandler() {} // no-op handler that ensures we're running change detection on input events.\n\n  /**\n   * Access injected document if available or fallback to global document reference\n   * @private\n   * @return {?}\n   */\n\n\n  _getDocument() {\n    return this._document || document;\n  }\n  /**\n   * Use defaultView of injected document if available or fallback to global window reference\n   * @private\n   * @return {?}\n   */\n\n\n  _getWindow() {\n    /** @type {?} */\n    const doc = this._getDocument();\n\n    return doc.defaultView || window;\n  }\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   * @private\n   * @param {?} textarea\n   * @return {?}\n   */\n\n\n  _scrollToCaretPosition(textarea) {\n    const {\n      selectionStart,\n      selectionEnd\n    } = textarea;\n    /** @type {?} */\n\n    const document = this._getDocument(); // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n\n\n    if (!this._destroyed.isStopped && document.activeElement === textarea) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n\n}\n\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n  return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\n\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTextareaAutosize,\n  selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n  hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n        return ctx._noopInputHandler();\n      });\n    }\n  },\n  inputs: {\n    minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n    maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n    enabled: [\"cdkTextareaAutosize\", \"enabled\"]\n  },\n  exportAs: [\"cdkTextareaAutosize\"]\n});\n/** @nocollapse */\n\nCdkTextareaAutosize.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\nCdkTextareaAutosize.propDecorators = {\n  minRows: [{\n    type: Input,\n    args: ['cdkAutosizeMinRows']\n  }],\n  maxRows: [{\n    type: Input,\n    args: ['cdkAutosizeMaxRows']\n  }],\n  enabled: [{\n    type: Input,\n    args: ['cdkTextareaAutosize']\n  }],\n  _noopInputHandler: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[cdkTextareaAutosize]',\n      exportAs: 'cdkTextareaAutosize',\n      host: {\n        'class': 'cdk-textarea-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: ['cdkTextareaAutosize']\n    }],\n    _noopInputHandler: [{\n      type: HostListener,\n      args: ['input']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  CdkTextareaAutosize.ngAcceptInputType_minRows;\n  /** @type {?} */\n\n  CdkTextareaAutosize.ngAcceptInputType_maxRows;\n  /** @type {?} */\n\n  CdkTextareaAutosize.ngAcceptInputType_enabled;\n  /**\n   * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._previousValue;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._initialHeight;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._destroyed;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._minRows;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._maxRows;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._enabled;\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._previousMinRows;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._textareaElement;\n  /**\n   * Cached height of a textarea with a single row.\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._cachedLineHeight;\n  /**\n   * Used to reference correct document/window\n   * @type {?}\n   * @protected\n   */\n\n  CdkTextareaAutosize.prototype._document;\n  /**\n   * Class that should be applied to the textarea while it's being measured.\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._measuringClass;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._platform;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTextareaAutosize.prototype._ngZone;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/text-field-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass TextFieldModule {}\n\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TextFieldModule\n});\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TextFieldModule_Factory(t) {\n    return new (t || TextFieldModule)();\n  },\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function () {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function () {\n      return [PlatformModule];\n    },\n    exports: function () {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkAutofill, CdkTextareaAutosize],\n      imports: [PlatformModule],\n      exports: [CdkAutofill, CdkTextareaAutosize]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };","map":{"version":3,"sources":["../../../../../../src/cdk/text-field/autofill.ts","../../../../../../src/cdk/text-field/autosize.ts","../../../../../../src/cdk/text-field/text-field-module.ts","../../../../../../src/cdk/text-field/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {EMPTY, Observable, Subject} from 'rxjs';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({passive: true});\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable({providedIn: 'root'})\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform, private _ngZone: NgZone) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent>;\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n\n  monitor(elementOrRef: Element | ElementRef<Element>): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const cssClass = 'cdk-text-field-autofilled';\n    const listener = ((event: AnimationEvent) => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' &&\n          !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: true}));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' &&\n          element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: false}));\n      }\n    }) as EventListenerOrEventListenerObject;\n\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element): void;\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<Element>): void;\n\n  stopMonitoring(elementOrRef: Element | ElementRef<Element>): void {\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[cdkAutofill]',\n})\nexport class CdkAutofill implements OnDestroy, OnInit {\n  /** Emits when the autofill state of the element changes. */\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef)\n      .subscribe(event => this.cdkAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n  HostListener,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | undefined;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = coerceNumberProperty(value);\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = coerceNumberProperty(value);\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input('cdkTextareaAutosize')\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    value = coerceBooleanProperty(value);\n\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  /** Class that should be applied to the textarea while it's being measured. */\n  private _measuringClass: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n    this._measuringClass = _platform.FIREFOX ?\n      'cdk-textarea-autosize-measuring-firefox' :\n      'cdk-textarea-autosize-measuring';\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    this._textareaElement.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.classList.add(this._measuringClass);\n    textarea.placeholder = '';\n\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const height = textarea.scrollHeight - 4;\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n    textarea.classList.remove(this._measuringClass);\n    textarea.placeholder = placeholderText;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to its original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  }\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('input')\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n    const document = this._getDocument();\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && document.activeElement === textarea) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n\n  static ngAcceptInputType_minRows: NumberInput;\n  static ngAcceptInputType_maxRows: NumberInput;\n  static ngAcceptInputType_enabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkAutofill} from './autofill';\nimport {CdkTextareaAutosize} from './autosize';\n\n\n@NgModule({\n  declarations: [CdkAutofill, CdkTextareaAutosize],\n  imports: [PlatformModule],\n  exports: [CdkAutofill, CdkTextareaAutosize],\n})\nexport class TextFieldModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}