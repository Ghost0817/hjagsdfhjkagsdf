{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService {\n  constructor(apiService, http) {\n    this.apiService = apiService;\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject({});\n    this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n    this.isAuthenticatedSubject = new ReplaySubject(1);\n    this.isAuthenticated = this.isAuthenticatedSubject.asObservable();\n  } // Verify JWT in localstorage with server & load user's info.\n  // This runs once on application startup.\n\n\n  populate() {\n    // If JWT detected, attempt to get & store user's info\n    if (localStorage.getItem('accessToken')) {\n      this.apiService.get('/api/account').subscribe(data => this.setAuth(data.user), err => this.purgeAuth());\n    } else {\n      // Remove any potential remnants of previous auth states\n      this.purgeAuth();\n    }\n  }\n\n  setAuth(user) {\n    // Save JWT sent from server in localstorage\n    this.currentUserSubject.next(user); // Set isAuthenticated to true\n\n    this.isAuthenticatedSubject.next(true);\n  }\n\n  purgeAuth() {\n    // Remove JWT from localstorage\n    localStorage.removeItem('accessToken'); // Set current user to an empty object\n\n    this.currentUserSubject.next({}); // Set auth status to false\n\n    this.isAuthenticatedSubject.next(false);\n  }\n\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.HttpClient));\n};\n\nUserService.ɵprov = i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(UserService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.ApiService\n    }, {\n      type: i2.HttpClient\n    }];\n  }, null);\n})();","map":{"version":3,"sources":["/Users/sainzaya/Desktop/type-writer/src/app/core/services/user.service.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAuB,eAAvB,EAA0C,aAA1C,QAA+D,MAA/D;AAGA,SAAgB,oBAAhB,QAA4C,gBAA5C;;;;AAGA,OAAM,MAAO,WAAP,CAAkB;AAOtB,EAAA,WAAA,CACU,UADV,EAEU,IAFV,EAE0B;AADhB,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,IAAA,GAAA,IAAA;AARF,SAAA,kBAAA,GAAqB,IAAI,eAAJ,CAAyB,EAAzB,CAArB;AACD,SAAA,WAAA,GAAc,KAAK,kBAAL,CAAwB,YAAxB,GAAuC,IAAvC,CAA4C,oBAAoB,EAAhE,CAAd;AAEC,SAAA,sBAAA,GAAyB,IAAI,aAAJ,CAA2B,CAA3B,CAAzB;AACD,SAAA,eAAA,GAAkB,KAAK,sBAAL,CAA4B,YAA5B,EAAlB;AAKH,GAVkB,CAYtB;AACA;;;AACA,EAAA,QAAQ,GAAA;AACN;AACA,QAAI,YAAY,CAAC,OAAb,CAAqB,aAArB,CAAJ,EAAyC;AACvC,WAAK,UAAL,CAAgB,GAAhB,CAAoB,cAApB,EACC,SADD,CAEE,IAAI,IAAI,KAAK,OAAL,CAAa,IAAI,CAAC,IAAlB,CAFV,EAGE,GAAG,IAAI,KAAK,SAAL,EAHT;AAKD,KAND,MAMO;AACL;AACA,WAAK,SAAL;AACD;AACF;;AAED,EAAA,OAAO,CAAC,IAAD,EAAU;AACf;AACA,SAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,EAFe,CAGf;;AACA,SAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC;AACD;;AAED,EAAA,SAAS,GAAA;AACP;AACA,IAAA,YAAY,CAAC,UAAb,CAAwB,aAAxB,EAFO,CAGP;;AACA,SAAK,kBAAL,CAAwB,IAAxB,CAA6B,EAA7B,EAJO,CAKP;;AACA,SAAK,sBAAL,CAA4B,IAA5B,CAAiC,KAAjC;AACD;;AAED,EAAA,cAAc,GAAA;AACZ,WAAO,KAAK,kBAAL,CAAwB,KAA/B;AACD;;AA9CqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA;;;;;uBAAX,W,EAAW,CAAA;UADvB;AACuB,GAAA,C","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable ,  BehaviorSubject ,  ReplaySubject } from 'rxjs';\n\nimport { ApiService } from './api.service';\nimport { map ,  distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable()\nexport class UserService {\n  private currentUserSubject = new BehaviorSubject<any>({} as any);\n  public currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n\n  private isAuthenticatedSubject = new ReplaySubject<boolean>(1);\n  public isAuthenticated = this.isAuthenticatedSubject.asObservable();\n\n  constructor (\n    private apiService: ApiService,\n    private http: HttpClient\n  ) {}\n\n  // Verify JWT in localstorage with server & load user's info.\n  // This runs once on application startup.\n  populate() {\n    // If JWT detected, attempt to get & store user's info\n    if (localStorage.getItem('accessToken')) {\n      this.apiService.get('/api/account')\n      .subscribe(\n        data => this.setAuth(data.user),\n        err => this.purgeAuth()\n      );\n    } else {\n      // Remove any potential remnants of previous auth states\n      this.purgeAuth();\n    }\n  }\n\n  setAuth(user: any) {\n    // Save JWT sent from server in localstorage\n    this.currentUserSubject.next(user);\n    // Set isAuthenticated to true\n    this.isAuthenticatedSubject.next(true);\n  }\n\n  purgeAuth() {\n    // Remove JWT from localstorage\n    localStorage.removeItem('accessToken')\n    // Set current user to an empty object\n    this.currentUserSubject.next({} as any);\n    // Set auth status to false\n    this.isAuthenticatedSubject.next(false);\n  }\n\n  getCurrentUser(): any {\n    return this.currentUserSubject.value;\n  }\n\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}