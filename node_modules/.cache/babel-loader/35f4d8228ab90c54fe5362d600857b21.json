{"ast":null,"code":"import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/autosize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\n\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n  /**\n   * @return {?}\n   */\n  get matAutosizeMinRows() {\n    return this.minRows;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set matAutosizeMinRows(value) {\n    this.minRows = value;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get matAutosizeMaxRows() {\n    return this.maxRows;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set matAutosizeMaxRows(value) {\n    this.maxRows = value;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get matAutosize() {\n    return this.enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set matAutosize(value) {\n    this.enabled = value;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get matTextareaAutosize() {\n    return this.enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set matTextareaAutosize(value) {\n    this.enabled = value;\n  }\n\n}\n\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) {\n  return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize);\n};\n\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTextareaAutosize,\n  selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"],\n  inputs: {\n    cdkAutosizeMinRows: \"cdkAutosizeMinRows\",\n    cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\",\n    matAutosizeMinRows: \"matAutosizeMinRows\",\n    matAutosizeMaxRows: \"matAutosizeMaxRows\",\n    matAutosize: [\"mat-autosize\", \"matAutosize\"],\n    matTextareaAutosize: \"matTextareaAutosize\"\n  },\n  exportAs: [\"matTextareaAutosize\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTextareaAutosize.propDecorators = {\n  matAutosizeMinRows: [{\n    type: Input\n  }],\n  matAutosizeMaxRows: [{\n    type: Input\n  }],\n  matAutosize: [{\n    type: Input,\n    args: ['mat-autosize']\n  }],\n  matTextareaAutosize: [{\n    type: Input\n  }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n      exportAs: 'matTextareaAutosize',\n      inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n      host: {\n        'class': 'cdk-textarea-autosize mat-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1'\n      }\n    }]\n  }], null, {\n    matAutosizeMinRows: [{\n      type: Input\n    }],\n    matAutosizeMaxRows: [{\n      type: Input\n    }],\n    matAutosize: [{\n      type: Input,\n      args: ['mat-autosize']\n    }],\n    matTextareaAutosize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\n\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-value-accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n * @type {?}\n */\n\n\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\n/** @type {?} */\n\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\n/** @type {?} */\n\nlet nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/**\n * \\@docs-private\n */\n\nclass MatInputBase {\n  /**\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} ngControl\n   */\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  MatInputBase.prototype._defaultErrorStateMatcher;\n  /** @type {?} */\n\n  MatInputBase.prototype._parentForm;\n  /** @type {?} */\n\n  MatInputBase.prototype._parentFormGroup;\n  /**\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatInputBase.prototype.ngControl;\n}\n/** @type {?} */\n\n\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\n\n\nclass MatInput extends _MatInputMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _platform\n   * @param {?} ngControl\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} inputValueAccessor\n   * @param {?} _autofillMonitor\n   * @param {?} ngZone\n   */\n  constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this.ngControl = ngControl;\n    this._autofillMonitor = _autofillMonitor;\n    this._uid = `mat-input-${nextUniqueId++}`;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    this.autofilled = false;\n    this._disabled = false;\n    this._required = false;\n    this._type = 'text';\n    this._readonly = false;\n    this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(\n    /**\n    * @param {?} t\n    * @return {?}\n    */\n    t => getSupportedInputTypes().has(t));\n    /** @type {?} */\n\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n\n    const nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n\n    this._inputValueAccessor = inputValueAccessor || element;\n    this._previousNativeValue = this.value; // Force setter to be called in case id was not specified.\n\n    this.id = this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        _elementRef.nativeElement.addEventListener('keyup',\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        event => {\n          /** @type {?} */\n          let el =\n          /** @type {?} */\n          event.target;\n\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n\n    if (this._isNativeSelect) {\n      this.controlType =\n      /** @type {?} */\n      element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * Input type of the element.\n   * @return {?}\n   */\n\n\n  get type() {\n    return this._type;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set type(value) {\n    this._type = value || 'text';\n\n    this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n\n\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      /** @type {?} */\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get value() {\n    return this._inputValueAccessor.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set value(value) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Whether the element is readonly.\n   * @return {?}\n   */\n\n\n  get readonly() {\n    return this._readonly;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n\n\n    this._dirtyCheckNativeValue();\n  }\n  /**\n   * Focuses the input.\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n  /**\n   * Callback for the cases where the focused state of the input changes.\n   * @param {?} isFocused\n   * @return {?}\n   */\n  // tslint:disable:no-host-decorator-in-concrete\n  // tslint:enable:no-host-decorator-in-concrete\n\n\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n  /**\n   * @return {?}\n   */\n\n\n  _onInput() {} // This is a noop function and is used to let Angular know whenever the value changes.\n  // Angular will run a new change detection each time the `input` event has been dispatched.\n  // It's necessary that Angular recognizes the value change, because when floatingLabel\n  // is set to false and Angular forms aren't used, the placeholder won't recognize the\n  // value changes and will not disappear.\n  // Listening to the input event wouldn't be necessary when the input is using the\n  // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n\n  /**\n   * Does some manual dirty checking on the native input `value` property.\n   * @protected\n   * @return {?}\n   */\n\n\n  _dirtyCheckNativeValue() {\n    /** @type {?} */\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Make sure the input is a supported type.\n   * @protected\n   * @return {?}\n   */\n\n\n  _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n  /**\n   * Checks whether the input type is one of the types that are never empty.\n   * @protected\n   * @return {?}\n   */\n\n\n  _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n  /**\n   * Checks whether the input is invalid based on the native validation.\n   * @protected\n   * @return {?}\n   */\n\n\n  _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n\n    /** @type {?} */\n    let validity =\n    /** @type {?} */\n    this._elementRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get empty() {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get shouldLabelFloat() {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n\n      /** @type {?} */\n      const selectElement =\n      /** @type {?} */\n      this._elementRef.nativeElement;\n      /** @type {?} */\n\n      const firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n      return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} ids\n   * @return {?}\n   */\n\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n\n}\n\nMatInput.ɵfac = function MatInput_Factory(t) {\n  return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatInput,\n  selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n  hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n  hostVars: 10,\n  hostBindings: function MatInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n        return ctx._focusChanged(true);\n      })(\"blur\", function MatInput_blur_HostBindingHandler() {\n        return ctx._focusChanged(false);\n      })(\"input\", function MatInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n      ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    disabled: \"disabled\",\n    required: \"required\",\n    type: \"type\",\n    value: \"value\",\n    readonly: \"readonly\",\n    placeholder: \"placeholder\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  exportAs: [\"matInput\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatInput\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [MAT_INPUT_VALUE_ACCESSOR]\n  }]\n}, {\n  type: AutofillMonitor\n}, {\n  type: NgZone\n}];\n\nMatInput.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  _focusChanged: [{\n    type: HostListener,\n    args: ['focus', ['true']]\n  }, {\n    type: HostListener,\n    args: ['blur', ['false']]\n  }],\n  _onInput: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n      exportAs: 'matInput',\n      host: {\n        /**\n         * \\@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n         */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-required]': 'required.toString()'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: ɵngcc2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.ErrorStateMatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [MAT_INPUT_VALUE_ACCESSOR]\n      }]\n    }, {\n      type: ɵngcc4.AutofillMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    _focusChanged: [{\n      type: HostListener,\n      args: ['focus', ['true']]\n    }, {\n      type: HostListener,\n      args: ['blur', ['false']]\n    }],\n    _onInput: [{\n      type: HostListener,\n      args: ['input']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatInput.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatInput.ngAcceptInputType_readonly;\n  /** @type {?} */\n\n  MatInput.ngAcceptInputType_required;\n  /** @type {?} */\n\n  MatInput.ngAcceptInputType_value;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._uid;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._previousNativeValue;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatInput.prototype._inputValueAccessor;\n  /**\n   * The aria-describedby attribute on the input for improved a11y.\n   * @type {?}\n   */\n\n  MatInput.prototype._ariaDescribedby;\n  /**\n   * Whether the component is being rendered on the server.\n   * @type {?}\n   */\n\n  MatInput.prototype._isServer;\n  /**\n   * Whether the component is a native html select.\n   * @type {?}\n   */\n\n  MatInput.prototype._isNativeSelect;\n  /**\n   * Whether the component is a textarea.\n   * @type {?}\n   */\n\n  MatInput.prototype._isTextarea;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatInput.prototype.focused;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatInput.prototype.stateChanges;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatInput.prototype.controlType;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatInput.prototype.autofilled;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._disabled;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._id;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatInput.prototype.placeholder;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._required;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._type;\n  /**\n   * An object used to control when error messages are shown.\n   * @type {?}\n   */\n\n  MatInput.prototype.errorStateMatcher;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatInput.prototype._readonly;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._neverEmptyInputTypes;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._elementRef;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatInput.prototype._platform;\n  /**\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatInput.prototype.ngControl;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatInput.prototype._autofillMonitor;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass MatInputModule {}\n\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatInputModule\n});\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatInputModule_Factory(t) {\n    return new (t || MatInputModule)();\n  },\n  providers: [ErrorStateMatcher],\n  imports: [[TextFieldModule, MatFormFieldModule], TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n  // be used together with `MatFormField`.\n  MatFormFieldModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, {\n    declarations: function () {\n      return [MatInput, MatTextareaAutosize];\n    },\n    imports: function () {\n      return [TextFieldModule, MatFormFieldModule];\n    },\n    exports: function () {\n      return [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatInput, MatTextareaAutosize],\n      imports: [TextFieldModule, MatFormFieldModule],\n      exports: [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };","map":{"version":3,"sources":["../../../../../../src/material/input/autosize.ts","../../../../../../src/material/input/input-errors.ts","../../../../../../src/material/input/input-value-accessor.ts","../../../../../../src/material/input/input.ts","../../../../../../src/material/input/input-module.ts","../../../../../../src/material/input/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  HostListener,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  readonly _isServer: boolean;\n\n  /** Whether the component is a native html select. */\n  readonly _isNativeSelect: boolean;\n\n  /** Whether the component is a textarea. */\n  readonly _isTextarea: boolean;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase();\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  /** Callback for the cases where the focused state of the input changes. */\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('focus', ['true'])\n  @HostListener('blur', ['false'])\n  // tslint:enable:no-host-decorator-in-concrete\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('input')\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_readonly: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that may\n  // accept different types.\n  static ngAcceptInputType_value: any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}