{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor() {}\n\n  intercept(req, next) {\n    const headersConfig = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n    const token = localStorage.getItem('accessToken');\n\n    if (token) {\n      headersConfig['Authorization'] = `Bearer ${token}`;\n    }\n\n    const request = req.clone({\n      setHeaders: headersConfig\n    });\n    return next.handle(request);\n  }\n\n}\n\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\n\nAuthInterceptor.ɵprov = i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(AuthInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();","map":{"version":3,"sources":["/Users/sainzaya/Desktop/type-writer/src/app/core/interceptors/auth.interceptor.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAAqC,eAArC;;AAKA,OAAM,MAAO,eAAP,CAAsB;AAC1B,EAAA,WAAA,GAAA,CAAgB;;AAEhB,EAAA,SAAS,CAAC,GAAD,EAAwB,IAAxB,EAAyC;AAChD,UAAM,aAAa,GAAG;AACpB,sBAAgB,kBADI;AAEpB,gBAAU;AAFU,KAAtB;AAKA,UAAM,KAAK,GAAG,YAAY,CAAC,OAAb,CAAqB,aAArB,CAAd;;AAEA,QAAI,KAAJ,EAAW;AACT,MAAA,aAAa,CAAC,eAAD,CAAb,GAAiC,UAAU,KAAK,EAAhD;AACD;;AAED,UAAM,OAAO,GAAG,GAAG,CAAC,KAAJ,CAAU;AAAE,MAAA,UAAU,EAAE;AAAd,KAAV,CAAhB;AACA,WAAO,IAAI,CAAC,MAAL,CAAY,OAAZ,CAAP;AACD;;AAjByB;;;mBAAf,e;AAAe,C;;;SAAf,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA;;;;;uBAAf,e,EAAe,CAAA;UAD3B;AAC2B,GAAA,C","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const headersConfig = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n\n    const token = localStorage.getItem('accessToken');\n\n    if (token) {\n      headersConfig['Authorization'] = `Bearer ${token}`;\n    }\n\n    const request = req.clone({ setHeaders: headersConfig });\n    return next.handle(request);\n  }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}