{"ast":null,"code":"import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Injectable, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/observers/observe-content.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass MutationObserverFactory {\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  create(callback) {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n\n}\n\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n  return new (t || MutationObserverFactory)();\n};\n/** @nocollapse */\n\n\nMutationObserverFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function MutationObserverFactory_Factory() {\n    return new MutationObserverFactory();\n  },\n  token: MutationObserverFactory,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\n\n\nclass ContentObserver {\n  /**\n   * @param {?} _mutationObserverFactory\n   */\n  constructor(_mutationObserverFactory) {\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /**\n     * Keeps track of the existing MutationObservers so they can be reused.\n     */\n\n    this._observedElements = new Map();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._observedElements.forEach(\n    /**\n    * @param {?} _\n    * @param {?} element\n    * @return {?}\n    */\n    (_, element) => this._cleanupObserver(element));\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n\n\n  observe(elementOrRef) {\n    /** @type {?} */\n    const element = coerceElement(elementOrRef);\n    return new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    observer => {\n      /** @type {?} */\n      const stream = this._observeElement(element);\n      /** @type {?} */\n\n\n      const subscription = stream.subscribe(observer);\n      return (\n        /**\n        * @return {?}\n        */\n        () => {\n          subscription.unsubscribe();\n\n          this._unobserveElement(element);\n        }\n      );\n    });\n  }\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _observeElement(element) {\n    if (!this._observedElements.has(element)) {\n      /** @type {?} */\n      const stream = new Subject();\n      /** @type {?} */\n\n      const observer = this._mutationObserverFactory.create(\n      /**\n      * @param {?} mutations\n      * @return {?}\n      */\n      mutations => stream.next(mutations));\n\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n\n      this._observedElements.set(element, {\n        observer,\n        stream,\n        count: 1\n      });\n    } else {\n      /** @type {?} */this._observedElements.get(element).count++;\n    }\n\n    return (\n      /** @type {?} */\n      this._observedElements.get(element).stream\n    );\n  }\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _unobserveElement(element) {\n    if (this._observedElements.has(element)) {\n      /** @type {?} */this._observedElements.get(element).count--;\n\n      if (!\n      /** @type {?} */\n      this._observedElements.get(element).count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n  /**\n   * Clean up the underlying MutationObserver for the specified element.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _cleanupObserver(element) {\n    if (this._observedElements.has(element)) {\n      const {\n        observer,\n        stream\n      } =\n      /** @type {?} */\n      this._observedElements.get(element);\n\n      if (observer) {\n        observer.disconnect();\n      }\n\n      stream.complete();\n\n      this._observedElements.delete(element);\n    }\n  }\n\n}\n\nContentObserver.ɵfac = function ContentObserver_Factory(t) {\n  return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory));\n};\n/** @nocollapse */\n\n\nContentObserver.ctorParameters = () => [{\n  type: MutationObserverFactory\n}];\n/** @nocollapse */\n\n\nContentObserver.ɵprov = ɵɵdefineInjectable({\n  factory: function ContentObserver_Factory() {\n    return new ContentObserver(ɵɵinject(MutationObserverFactory));\n  },\n  token: ContentObserver,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MutationObserverFactory\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Keeps track of the existing MutationObservers so they can be reused.\n   * @type {?}\n   * @private\n   */\n  ContentObserver.prototype._observedElements;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ContentObserver.prototype._mutationObserverFactory;\n}\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n\n\nclass CdkObserveContent {\n  /**\n   * @param {?} _contentObserver\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   */\n  constructor(_contentObserver, _elementRef, _ngZone) {\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * Event emitted for each change in the element's content.\n     */\n\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   * @return {?}\n   */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  /**\n   * Debounce interval for emitting the changes.\n   * @return {?}\n   */\n\n\n  get debounce() {\n    return this._debounce;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set debounce(value) {\n    this._debounce = coerceNumberProperty(value);\n\n    this._subscribe();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _subscribe() {\n    this._unsubscribe();\n    /** @type {?} */\n\n\n    const stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n\n\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n\n}\n\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n  return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkObserveContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkObserveContent,\n  selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n  inputs: {\n    disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n    debounce: \"debounce\"\n  },\n  outputs: {\n    event: \"cdkObserveContent\"\n  },\n  exportAs: [\"cdkObserveContent\"]\n});\n/** @nocollapse */\n\nCdkObserveContent.ctorParameters = () => [{\n  type: ContentObserver\n}, {\n  type: ElementRef\n}, {\n  type: NgZone\n}];\n\nCdkObserveContent.propDecorators = {\n  event: [{\n    type: Output,\n    args: ['cdkObserveContent']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['cdkObserveContentDisabled']\n  }],\n  debounce: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent'\n    }]\n  }], function () {\n    return [{\n      type: ContentObserver\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }],\n    debounce: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  CdkObserveContent.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  CdkObserveContent.ngAcceptInputType_debounce;\n  /**\n   * Event emitted for each change in the element's content.\n   * @type {?}\n   */\n\n  CdkObserveContent.prototype.event;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkObserveContent.prototype._disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkObserveContent.prototype._debounce;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkObserveContent.prototype._currentSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkObserveContent.prototype._contentObserver;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkObserveContent.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkObserveContent.prototype._ngZone;\n}\n\nclass ObserversModule {}\n\nObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ObserversModule\n});\nObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ObserversModule_Factory(t) {\n    return new (t || ObserversModule)();\n  },\n  providers: [MutationObserverFactory]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, {\n    declarations: [CdkObserveContent],\n    exports: [CdkObserveContent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkObserveContent],\n      declarations: [CdkObserveContent],\n      providers: [MutationObserverFactory]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/observers/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };","map":{"version":3,"sources":["../../../../../../src/cdk/observers/observe-content.ts","../../../../../../src/cdk/observers/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAkCA,MAAa,uBAAb,CAAoC;AACpC;;;;AAAE,EAAA,MAAM,CAAC,QAAD,EAA2B;AAC/B,WAAO,OAAO,gBAAP,KAA4B,WAA5B,GAA0C,IAA1C,GAAiD,IAAI,gBAAJ,CAAqB,QAArB,CAAxD;AACD;;AAHiC;;wCADnC,+B,CAAY,C,EAAA;AAAA,SAAY,KAAA,CAAM,IAAC,uBAAP,GAAZ;AAAmB,C;AAC1B;;;AAAA,uBAAA,CAAA,KAAA,GAAA,kBAAA,CAAA;AAAA,EAAA,OAAA,EAAA,SAAA,+BAAA,GAAA;AAAA,WAAA,IAAA,uBAAA,EAAA;AAAA,GAAA;AAAA,EAAA,KAAA,EAAA,uBAAA;AAAA,EAAA,UAAA,EAAA;AAAA,CAAA,CAAA;;;;;;;;;;AAOkB,C;AAAC;;;;;AAEzB,MAAa,eAAb,CAA4B;AAAG;;;AAQ7B,EAAA,WAAA,CAAoB,wBAApB,EAAqE;AAAjD,SAAA,wBAAA,GAAA,wBAAA;AAAkD;;;;AAN9D,SAAA,iBAAA,GAAoB,IAAI,GAAJ,EAApB;AAMiE;AAC3E;;;;;AACE,EAAA,WAAW,GAAA;AACT,SAAK,iBAAL,CAAuB,OAAvB;AAA8B;;;;;AAAC,KAAC,CAAD,EAAI,OAAJ,KAAgB,KAAK,gBAAL,CAAsB,OAAtB,CAA/C;AACD;AACH;;;;;;AAaE,EAAA,OAAO,CAAC,YAAD,EAA4C;AAAI;AAAyB,UACxE,OAAO,GAAG,aAAa,CAAC,YAAD,CADiD;AAG9E,WAAO,IAAI,UAAJ;AAAc;;;;AAAE,IAAA,QAAD,IAAqC;AAC/D;AAA6B,YAAjB,MAAM,GAAG,KAAK,eAAL,CAAqB,OAArB,CAAQ;AAC7B;;;AAA6B,YAAjB,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAAE;AAEvB;AAAA;;;AAAO,cAAA;AACL,UAAA,YAAY,CAAC,WAAb;;AACA,eAAK,iBAAL,CAAuB,OAAvB;AACD;AAHD;AAID,KARM,CAAP;AASD;AACH;;;;;;;;;AAKU,EAAA,eAAe,CAAC,OAAD,EAAiB;AACtC,QAAI,CAAC,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,CAAL,EAA0C;AAC9C;AAA6B,YAAjB,MAAM,GAAG,IAAI,OAAJ,EAAQ;AAC7B;;AAA6B,YAAjB,QAAQ,GAAG,KAAK,wBAAL,CAA8B,MAA9B;AAAoC;;;;AAAC,MAAA,SAAS,IAAI,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAlD,CAAM;;AACvB,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB,EAA0B;AACxB,UAAA,aAAa,EAAE,IADS;AAExB,UAAA,SAAS,EAAE,IAFa;AAGxB,UAAA,OAAO,EAAE;AAHe,SAA1B;AAKD;;AACD,WAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,EAAoC;AAAC,QAAA,QAAD;AAAW,QAAA,MAAX;AAAmB,QAAA,KAAK,EAAE;AAA1B,OAApC;AACD,KAXD,MAWO;AACL,sBAAA,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,CAAA,CAAqC,KAArC;AACD;;AACD,WAAO;AAAA;AAAA,WAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,CAAA,CAAqC;AAA5C;AACD;AACH;;;;;;;;;AAKU,EAAA,iBAAiB,CAAC,OAAD,EAAiB;AACxC,QAAI,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,CAAJ,EAAyC;AACvC,sBAAA,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,CAAA,CAAqC,KAArC;;AACA,UAAI;AAAC;AAAA,WAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,CAAA,CAAqC,KAA1C,EAAiD;AAC/C,aAAK,gBAAL,CAAsB,OAAtB;AACD;AACF;AACF;AACH;;;;;;;;AAEU,EAAA,gBAAgB,CAAC,OAAD,EAAiB;AACvC,QAAI,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,CAAJ,EAAyC;AAC7C,YAAY;AAAC,QAAA,QAAD;AAAW,QAAA;AAAX;AAAkB;AAAG,WAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,CAAjC;;AACM,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,UAAT;AACD;;AACD,MAAA,MAAM,CAAC,QAAP;;AACA,WAAK,iBAAL,CAAuB,MAAvB,CAA8B,OAA9B;AACD;AACF;;AArFyB;;gCAD3B,uB,CAAU,C,EAAA;AAAA,SAAE,KAAA,CAAU,IAAE,eAAZ,EAAmB,MAAA,CAAA,QAAA,CAAA,uBAAA,CAAnB,CAAF;AAAqB,C;AAC1B;;;AAAmB,eAAA,CAAA,cAAA,GAAA,MAAA,CACX;AAAA,EAAA,IAAA,EAOkC;AAPlC,CADW,CAAA;AAUzB;;;AAAA,eAAA,CAAA,KAAA,GAAA,kBAAA,CAAA;AAAA,EAAA,OAAA,EAAA,SAAA,uBAAA,GAAA;AAAA,WAAA,IAAA,eAAA,CAAA,QAAA,CAAA,uBAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,KAAA,EAAA,eAAA;AAAA,EAAA,UAAA,EAAA;AAAA,CAAA,CAAA;;;;;;;;;;;;;;AAOC,C;;AAAC,IAAA,KAAA,EAAA;AACO;;;;;AAhBP,EAAA,eAAA,CAAA,SAAA,CAAA,iBAAA;AAKF;;;;;AACc,EAAA,eAAA,CAAA,SAAA,CAAA,wBAAA;AAA0D;AAAE;;;;;;AAyF1E,MAAa,iBAAb,CAA8B;AAAG;;;;;AA2B/B,EAAA,WAAA,CAAoB,gBAApB,EACoB,WADpB,EAEoB,OAFpB,EAEmC;AAFf,SAAA,gBAAA,GAAA,gBAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,OAAA,GAAA,OAAA;AAAgB;;;;AA3BP,SAAA,KAAA,GAAQ,IAAI,YAAJ,EAAR;AAYrB,SAAA,SAAA,GAAY,KAAZ;AAWA,SAAA,oBAAA,GAA4C,IAA5C;AAI+B;AACzC;;;;;;;AAtBE,MACI,QADJ,GACY;AAAK,WAAO,KAAK,SAAZ;AAAwB;AAC3C;;;;;;AAAE,MAAI,QAAJ,CAAa,KAAb,EAAuB;AACrB,SAAK,SAAL,GAAiB,qBAAqB,CAAC,KAAD,CAAtC;AACA,SAAK,SAAL,GAAiB,KAAK,YAAL,EAAjB,GAAuC,KAAK,UAAL,EAAvC;AACD;AACH;;;;;;AAGE,MACI,QADJ,GACY;AAAa,WAAO,KAAK,SAAZ;AAAwB;AACnD;;;;;;AAAE,MAAI,QAAJ,CAAa,KAAb,EAA0B;AACxB,SAAK,SAAL,GAAiB,oBAAoB,CAAC,KAAD,CAArC;;AACA,SAAK,UAAL;AACD;AACH;;;;;AAQE,EAAA,kBAAkB,GAAA;AAChB,QAAI,CAAC,KAAK,oBAAN,IAA8B,CAAC,KAAK,QAAxC,EAAkD;AAChD,WAAK,UAAL;AACD;AACF;AACH;;;;;AACE,EAAA,WAAW,GAAA;AACT,SAAK,YAAL;AACD;AACH;;;;;;AACU,EAAA,UAAU,GAAA;AAChB,SAAK,YAAL;AACJ;;;AAAyB,UAAf,MAAM,GAAG,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,KAAK,WAAnC,CAAM,CAFL,CAGpB;AAEG;AACI;AACI;;;AACP,SAAK,OAAL,CAAa,iBAAb;AAA8B;;;AAAC,UAAA;AAC7B,WAAK,oBAAL,GACI,CAAC,KAAK,QAAL,GAAgB,MAAM,CAAC,IAAP,CAAY,YAAY,CAAC,KAAK,QAAN,CAAxB,CAAhB,GAA2D,MAA5D,EAAoE,SAApE,CAA8E,KAAK,KAAnF,CADJ;AAED,KAHD;AAID;AACH;;;;;;AACU,EAAA,YAAY,GAAA;AAClB,QAAI,KAAK,oBAAT,EAA+B;AAC7B,WAAK,oBAAL,CAA0B,WAA1B;AACD;AACF;;AA3D2B;;kCAJ7B,yB,CAAS,C,EAAC;AAAA,SAAA,KAAA,CAAA,IACT,iBADS,EACC,MAAA,CAAA,iBAAA,CAAqB,eAArB,CADD,EAEC,MAAA,CAAA,iBAAA,CAAmB,MAC9B,CAAA,UADW,CAFD,EAGV,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,MAAA,CAHU,CAAA;AAGV,C;;;;;;;;;;;;aACI,mB;;AAAC;;AAAmB,iBAAA,CAAA,cAAA,GAAA,MAAA,CAA2C;AAAA,EAAA,IAAA,EA2B5B;AA3B4B,CAA3C,EA4BvB;AAAA,EAAA,IAAA,EAvJA;AAuJA,CA5BuB,EA1HvB;AAAA,EAAA,IAAA,EAIA;AAJA,CA0HuB,CAAA;;AArHrB,iBAAA,CAAA,cAAA,GAAA;AAEc,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAqHf,MArHe;AAqHT,IAAA,IAAA,EAAA,CAAC,mBAAD;AArHS,GAAA,CAFd;AAuHgC,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAMjC,KANiC;AAM5B,IAAA,IAAA,EAAA,CAAC,2BAAD;AAN4B,GAAA,CAvHhC;AA8HC,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAQF;AARE,GAAA;AA9HD,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuID,C;;AAAC,IAAA,KAAA,EAAA;AAAa;AA2Cf,EAAA,iBAAA,CAAA,0BAAA;AACF;;AAAE,EAAA,iBAAA,CAAA,0BAAA;AACF;;;;;AA7DE,EAAA,iBAAA,CAAA,SAAA,CAAA,KAAA;AACF;;;;;AAWE,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA;AACF;;;;;AAQE,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA;AACF;;;;;AACE,EAAA,iBAAA,CAAA,SAAA,CAAA,oBAAA;AACF;;;;;AACc,EAAA,iBAAA,CAAA,SAAA,CAAA,gBAAA;AAA0C;;;;;AAC1C,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA;AAA6C;;;;;AAC7C,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA;AAAwB;;AA0CtC,MAAa,eAAb,CAA4B;;8BAL3B,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,eAAU,CAAA,IAAV,GAAU,MAAA,CAAiB,gBAAjB,CAAkB;AAC5B,EAAA,OAAA,EAAA,SAAe,uBAAf,CAAiC,CAAjC,EAAiC;AAAA,WACjC,KAAA,CAAS,IAAG,eAAZ,GADiC;AACrB,GAFgB;AAEQ,EAAA,SAAA,EAAA,CAAA,uBAAA;AAFR,CAAlB,CAAV;;;;;;;;;;;;;;;;;;;;AAIG,C;AAAE;;;;;;ACnNP;;;;;AAIA,SAAA,iBAAA,EAAA,eAAA,EAAA,uBAAA,EAAA,eAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: BooleanInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}