{"ast":null,"code":"import { SecurityContext, Injectable, Optional, Inject, ErrorHandler, ɵɵdefineInjectable, ɵɵinject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Options that can be used to configure how an icon or the icons in an icon set are presented.\n * @record\n */\n\n\nfunction IconOptions() {}\n\nif (false) {\n  /**\n   * View box to set on the icon.\n   * @type {?|undefined}\n   */\n  IconOptions.prototype.viewBox;\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\n\n\nclass SvgIconConfig {\n  /**\n   * @param {?} data\n   * @param {?=} options\n   */\n  constructor(data, options) {\n    this.options = options; // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n\n    if (!!\n    /** @type {?} */\n    data.nodeName) {\n      this.svgElement =\n      /** @type {?} */\n      data;\n    } else {\n      this.url =\n      /** @type {?} */\n      data;\n    }\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  SvgIconConfig.prototype.url;\n  /** @type {?} */\n\n  SvgIconConfig.prototype.svgElement;\n  /** @type {?} */\n\n  SvgIconConfig.prototype.options;\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nclass MatIconRegistry {\n  /**\n   * @param {?} _httpClient\n   * @param {?} _sanitizer\n   * @param {?} document\n   * @param {?=} _errorHandler\n   */\n  constructor(_httpClient, _sanitizer, document, _errorHandler) {\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    this._errorHandler = _errorHandler;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n\n    this._iconSetConfigs = new Map();\n    /**\n     * Cache for icons loaded by direct URLs.\n     */\n\n    this._cachedIconsByUrl = new Map();\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     */\n\n    this._inProgressUrlFetches = new Map();\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     */\n\n    this._fontCssClassesByAlias = new Map();\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n\n    this._defaultFontSetClass = 'material-icons';\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @param {?=} options\n   * @return {THIS}\n   */\n\n\n  addSvgIcon(iconName, url, options) {\n    return (\n      /** @type {?} */\n      this.addSvgIconInNamespace('', iconName, url, options)\n    );\n  }\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} literal SVG source of the icon.\n   * @param {?=} options\n   * @return {THIS}\n   */\n\n\n  addSvgIconLiteral(iconName, literal, options) {\n    return (\n      /** @type {?} */\n      this.addSvgIconLiteralInNamespace('', iconName, literal, options)\n    );\n  }\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which the icon should be registered.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @param {?=} options\n   * @return {THIS}\n   */\n\n\n  addSvgIconInNamespace(namespace, iconName, url, options) {\n    return (\n      /** @type {?} */\n      this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options))\n    );\n  }\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which the icon should be registered.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} literal SVG source of the icon.\n   * @param {?=} options\n   * @return {THIS}\n   */\n\n\n  addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n    /** @type {?} */\n    const sanitizedLiteral =\n    /** @type {?} */\n    this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    /** @type {?} */\n\n\n    const svgElement =\n    /** @type {?} */\n    this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n\n    return (\n      /** @type {?} */\n      this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options))\n    );\n  }\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} url\n   * @param {?=} options\n   * @return {THIS}\n   */\n\n\n  addSvgIconSet(url, options) {\n    return (\n      /** @type {?} */\n      this.addSvgIconSetInNamespace('', url, options)\n    );\n  }\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} literal SVG source of the icon set.\n   * @param {?=} options\n   * @return {THIS}\n   */\n\n\n  addSvgIconSetLiteral(literal, options) {\n    return (\n      /** @type {?} */\n      this.addSvgIconSetLiteralInNamespace('', literal, options)\n    );\n  }\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which to register the icon set.\n   * @param {?} url\n   * @param {?=} options\n   * @return {THIS}\n   */\n\n\n  addSvgIconSetInNamespace(namespace, url, options) {\n    return (\n      /** @type {?} */\n      this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options))\n    );\n  }\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which to register the icon set.\n   * @param {?} literal SVG source of the icon set.\n   * @param {?=} options\n   * @return {THIS}\n   */\n\n\n  addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n    /** @type {?} */\n    const sanitizedLiteral =\n    /** @type {?} */\n    this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    /** @type {?} */\n\n\n    const svgElement =\n    /** @type {?} */\n    this._svgElementFromString(sanitizedLiteral);\n\n    return (\n      /** @type {?} */\n      this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options))\n    );\n  }\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @template THIS\n   * @this {THIS}\n   * @param {?} alias Alias for the font.\n   * @param {?=} className Class name override to be used instead of the alias.\n   * @return {THIS}\n   */\n\n\n  registerFontClassAlias(alias, className = alias) {\n    /** @type {?} */\n    this._fontCssClassesByAlias.set(alias, className);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   * @param {?} alias\n   * @return {?}\n   */\n\n\n  classNameForFontAlias(alias) {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @template THIS\n   * @this {THIS}\n   * @param {?} className\n   * @return {THIS}\n   */\n\n\n  setDefaultFontSetClass(className) {\n    /** @type {?} */\n    this._defaultFontSetClass = className;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   * @return {?}\n   */\n\n\n  getDefaultFontSetClass() {\n    return this._defaultFontSetClass;\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param {?} safeUrl URL from which to fetch the SVG icon.\n   * @return {?}\n   */\n\n\n  getSvgIconFromUrl(safeUrl) {\n    /** @type {?} */\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    /** @type {?} */\n\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return of(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(\n    /**\n    * @param {?} svg\n    * @return {?}\n    */\n    svg => this._cachedIconsByUrl.set(\n    /** @type {?} */\n    url, svg)), map(\n    /**\n    * @param {?} svg\n    * @return {?}\n    */\n    svg => cloneSvg(svg)));\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param {?} name Name of the icon to be retrieved.\n   * @param {?=} namespace Namespace in which to look for the icon.\n   * @return {?}\n   */\n\n\n  getNamedSvgIcon(name, namespace = '') {\n    // Return (copy of) cached icon if possible.\n\n    /** @type {?} */\n    const key = iconKey(namespace, name);\n    /** @type {?} */\n\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    } // See if we have any icon sets registered for the namespace.\n\n    /** @type {?} */\n\n\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return throwError(getMatIconNameNotFoundError(key));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._svgIconConfigs.clear();\n\n    this._iconSetConfigs.clear();\n\n    this._cachedIconsByUrl.clear();\n  }\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   * @private\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _getSvgFromConfig(config) {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(tap(\n      /**\n      * @param {?} svg\n      * @return {?}\n      */\n      svg => config.svgElement = svg), map(\n      /**\n      * @param {?} svg\n      * @return {?}\n      */\n      svg => cloneSvg(svg)));\n    }\n  }\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   * @private\n   * @param {?} name\n   * @param {?} iconSetConfigs\n   * @return {?}\n   */\n\n\n  _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n\n    /** @type {?} */\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return of(namedIcon);\n    } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n\n    /** @type {?} */\n\n\n    const iconSetFetchRequests = iconSetConfigs.filter(\n    /**\n    * @param {?} iconSetConfig\n    * @return {?}\n    */\n    iconSetConfig => !iconSetConfig.svgElement).map(\n    /**\n    * @param {?} iconSetConfig\n    * @return {?}\n    */\n    iconSetConfig => {\n      return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(\n      /**\n      * @param {?} err\n      * @return {?}\n      */\n      err => {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n        // combined Observable won't necessarily fail.\n\n        /** @type {?} */\n\n\n        const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`; // @breaking-change 9.0.0 _errorHandler parameter to be made required\n\n        if (this._errorHandler) {\n          this._errorHandler.handleError(new Error(errorMessage));\n        } else {\n          console.error(errorMessage);\n        }\n\n        return of(null);\n      }));\n    }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n\n    return forkJoin(iconSetFetchRequests).pipe(map(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   * @private\n   * @param {?} iconName\n   * @param {?} iconSetConfigs\n   * @return {?}\n   */\n\n\n  _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      const config = iconSetConfigs[i];\n\n      if (config.svgElement) {\n        /** @type {?} */\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   * @private\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _loadSvgIconFromConfig(config) {\n    return this._fetchUrl(config.url).pipe(map(\n    /**\n    * @param {?} svgText\n    * @return {?}\n    */\n    svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   * @private\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _loadSvgIconSetFromConfig(config) {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return of(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(\n    /**\n    * @param {?} svgText\n    * @return {?}\n    */\n    svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   * @private\n   * @param {?} responseText\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createSvgElementForSingleIcon(responseText, options) {\n    /** @type {?} */\n    const svg = this._svgElementFromString(responseText);\n\n    this._setSvgAttributes(svg, options);\n\n    return svg;\n  }\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   * @private\n   * @param {?} iconSet\n   * @param {?} iconName\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _extractSvgIconFromSet(iconSet, iconName, options) {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n\n    /** @type {?} */\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    } // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n\n    /** @type {?} */\n\n\n    const iconElement =\n    /** @type {?} */\n    iconSource.cloneNode(true);\n    iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(\n      /** @type {?} */\n      iconElement, options);\n    } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    } // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n    /** @type {?} */\n\n\n    const svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n    svg.appendChild(iconElement);\n    return this._setSvgAttributes(svg, options);\n  }\n  /**\n   * Creates a DOM element from the given SVG string.\n   * @private\n   * @param {?} str\n   * @return {?}\n   */\n\n\n  _svgElementFromString(str) {\n    /** @type {?} */\n    const div = this._document.createElement('DIV');\n\n    div.innerHTML = str;\n    /** @type {?} */\n\n    const svg =\n    /** @type {?} */\n    div.querySelector('svg');\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _toSvgElement(element) {\n    /** @type {?} */\n    const svg = this._svgElementFromString('<svg></svg>');\n    /** @type {?} */\n\n\n    const attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n\n    for (let i = 0; i < attributes.length; i++) {\n      const {\n        name,\n        value\n      } = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   * @private\n   * @param {?} svg\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _setSvgAttributes(svg, options) {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   * @private\n   * @param {?} safeUrl\n   * @return {?}\n   */\n\n\n  _fetchUrl(safeUrl) {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n    /** @type {?} */\n\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n    /** @type {?} */\n\n\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    } // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n\n    /** @type {?} */\n\n\n    const req = this._httpClient.get(url, {\n      responseType: 'text'\n    }).pipe(finalize(\n    /**\n    * @return {?}\n    */\n    () => this._inProgressUrlFetches.delete(url)), share());\n\n    this._inProgressUrlFetches.set(url, req);\n\n    return req;\n  }\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @private\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which to register the icon config.\n   * @param {?} iconName Name under which to register the config.\n   * @param {?} config Config to be registered.\n   * @return {THIS}\n   */\n\n\n  _addSvgIconConfig(namespace, iconName, config) {\n    /** @type {?} */\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @private\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which to register the icon config.\n   * @param {?} config Config to be registered.\n   * @return {THIS}\n   */\n\n\n  _addSvgIconSetConfig(namespace, config) {\n    /** @type {?} */\n    const configNamespace =\n    /** @type {?} */\n    this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      /** @type {?} */\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n\n}\n\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n  return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler, 8));\n};\n/** @nocollapse */\n\n\nMatIconRegistry.ctorParameters = () => [{\n  type: HttpClient,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: DomSanitizer\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ErrorHandler,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/** @nocollapse */\n\n\nMatIconRegistry.ɵprov = ɵɵdefineInjectable({\n  factory: function MatIconRegistry_Factory() {\n    return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8));\n  },\n  token: MatIconRegistry,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.ErrorHandler,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatIconRegistry.prototype._document;\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._svgIconConfigs;\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._iconSetConfigs;\n  /**\n   * Cache for icons loaded by direct URLs.\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._cachedIconsByUrl;\n  /**\n   * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._inProgressUrlFetches;\n  /**\n   * Map from font identifiers to their CSS class names. Used for icon fonts.\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._fontCssClassesByAlias;\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._defaultFontSetClass;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._httpClient;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._sanitizer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._errorHandler;\n}\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, [new Optional(), ErrorHandler], [new Optional(),\n  /** @type {?} */\n  DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\n\nfunction cloneSvg(svg) {\n  return (\n    /** @type {?} */\n    svg.cloneNode(true)\n  );\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/**\n * \\@docs-private\n */\n\n\nclass MatIconBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  MatIconBase.prototype._elementRef;\n}\n/** @type {?} */\n\n\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * Stubbed out location for `MatIcon`.\n * \\@docs-private\n * @record\n */\n\nfunction MatIconLocation() {}\n\nif (false) {\n  /** @type {?} */\n  MatIconLocation.prototype.getPathname;\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  /** @type {?} */\n  const _document = inject(DOCUMENT);\n  /** @type {?} */\n\n\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname:\n    /**\n    * @return {?}\n    */\n    () => _location ? _location.pathname + _location.search : ''\n  };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\n\n\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nconst ɵ0 =\n/**\n* @param {?} attr\n* @return {?}\n*/\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\n\n\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\n\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nclass MatIcon extends _MatIconMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _iconRegistry\n   * @param {?} ariaHidden\n   * @param {?=} _location\n   * @param {?=} _errorHandler\n   */\n  constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n    super(elementRef);\n    this._iconRegistry = _iconRegistry;\n    this._location = _location;\n    this._errorHandler = _errorHandler;\n    this._inline = false;\n    /**\n     * Subscription to the current in-progress SVG icon request.\n     */\n\n    this._currentIconFetch = Subscription.EMPTY; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   * @return {?}\n   */\n\n\n  get inline() {\n    return this._inline;\n  }\n  /**\n   * @param {?} inline\n   * @return {?}\n   */\n\n\n  set inline(inline) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  /**\n   * Font set that the icon is a part of.\n   * @return {?}\n   */\n\n\n  get fontSet() {\n    return this._fontSet;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set fontSet(value) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  /**\n   * Name of an icon within a font set.\n   * @return {?}\n   */\n\n\n  get fontIcon() {\n    return this._fontIcon;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set fontIcon(value) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   * @private\n   * @param {?} iconName\n   * @return {?}\n   */\n\n\n  _splitIconName(iconName) {\n    if (!iconName) {\n      return ['', ''];\n    }\n    /** @type {?} */\n\n\n    const parts = iconName.split(':');\n\n    switch (parts.length) {\n      case 1:\n        return ['', parts[0]];\n      // Use default namespace.\n\n      case 2:\n        return (\n          /** @type {?} */\n          parts\n        );\n\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n\n    /** @type {?} */\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      this._currentIconFetch.unsubscribe();\n\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n        /**\n        * @param {?} svg\n        * @return {?}\n        */\n        svg => this._setSvgElement(svg),\n        /**\n        * @param {?} err\n        * @return {?}\n        */\n        err => {\n          /** @type {?} */\n          const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`; // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n\n          if (this._errorHandler) {\n            this._errorHandler.handleError(new Error(errorMessage));\n          } else {\n            console.error(errorMessage);\n          }\n        });\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterViewChecked() {\n    /** @type {?} */\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      /** @type {?} */\n      const newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n\n\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._currentIconFetch.unsubscribe();\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _usingFontIcon() {\n    return !this.svgIcon;\n  }\n  /**\n   * @private\n   * @param {?} svg\n   * @return {?}\n   */\n\n\n  _setSvgElement(svg) {\n    this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n\n    /** @type {?} */\n\n\n    const styleTags =\n    /** @type {?} */\n    svg.querySelectorAll('style');\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    } // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n\n\n    if (this._location) {\n      /** @type {?} */\n      const path = this._location.getPathname();\n\n      this._previousPath = path;\n\n      this._cacheChildrenWithExternalReferences(svg);\n\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _clearSvgElement() {\n    /** @type {?} */\n    const layoutElement = this._elementRef.nativeElement;\n    /** @type {?} */\n\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n    while (childCount--) {\n      /** @type {?} */\n      const child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const elem = this._elementRef.nativeElement;\n    /** @type {?} */\n\n    const fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _cleanupFontValue(value) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   * @private\n   * @param {?} path\n   * @return {?}\n   */\n\n\n  _prependPathToReferences(path) {\n    /** @type {?} */\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach(\n      /**\n      * @param {?} attrs\n      * @param {?} element\n      * @return {?}\n      */\n      (attrs, element) => {\n        attrs.forEach(\n        /**\n        * @param {?} attr\n        * @return {?}\n        */\n        attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _cacheChildrenWithExternalReferences(element) {\n    /** @type {?} */\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    /** @type {?} */\n\n    const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(\n      /**\n      * @param {?} attr\n      * @return {?}\n      */\n      attr => {\n        /** @type {?} */\n        const elementWithReference = elementsWithFuncIri[i];\n        /** @type {?} */\n\n        const value = elementWithReference.getAttribute(attr);\n        /** @type {?} */\n\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          /** @type {?} */\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          /** @type {?} */\n          attributes.push({\n            name: attr,\n            value: match[1]\n          });\n        }\n      });\n    }\n  }\n\n}\n\nMatIcon.ɵfac = function MatIcon_Factory(t) {\n  return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler, 8));\n};\n\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatIcon,\n  selectors: [[\"mat-icon\"]],\n  hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n  hostVars: 4,\n  hostBindings: function MatIcon_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    }\n  },\n  inputs: {\n    color: \"color\",\n    inline: \"inline\",\n    fontSet: \"fontSet\",\n    fontIcon: \"fontIcon\",\n    svgIcon: \"svgIcon\"\n  },\n  exportAs: [\"matIcon\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatIcon.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: MatIconRegistry\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['aria-hidden']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_ICON_LOCATION]\n  }]\n}, {\n  type: ErrorHandler,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nMatIcon.propDecorators = {\n  inline: [{\n    type: Input\n  }],\n  svgIcon: [{\n    type: Input\n  }],\n  fontSet: [{\n    type: Input\n  }],\n  fontIcon: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon notranslate',\n        '[class.mat-icon-inline]': 'inline',\n        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }, {\n      type: ɵngcc0.ErrorHandler,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatIcon.ngAcceptInputType_inline;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._inline;\n  /**\n   * Name of the icon in the SVG icon set.\n   * @type {?}\n   */\n\n  MatIcon.prototype.svgIcon;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._fontSet;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._fontIcon;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._previousFontSetClass;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._previousFontIconClass;\n  /**\n   * Keeps track of the current page path.\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._previousPath;\n  /**\n   * Keeps track of the elements and attributes that we've prefixed with the current path.\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._elementsWithExternalReferences;\n  /**\n   * Subscription to the current in-progress SVG icon request.\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._currentIconFetch;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._iconRegistry;\n  /**\n   * @deprecated `location` parameter to be made required.\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._location;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._errorHandler;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass MatIconModule {}\n\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatIconModule\n});\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatIconModule_Factory(t) {\n    return new (t || MatIconModule)();\n  },\n  imports: [[MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function () {\n      return [MatIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };","map":{"version":3,"sources":["../../../../../../src/material/icon/icon-registry.ts","../../../../../../src/material/icon/icon.ts","../../../../../../src/material/icon/icon-module.ts","../../../../../../src/material/icon/index.ts"],"names":["observableOf","observableThrow"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    // @breaking-change 9.0.0 _errorHandler parameter to be made required\n    @Optional() private readonly _errorHandler?: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            // @breaking-change 9.0.0 _errorHandler parameter to be made required\n            if (this._errorHandler) {\n              this._errorHandler.handleError(new Error(errorMessage));\n            } else {\n              console.error(errorMessage);\n            }\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any,\n  errorHandler?: ErrorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), ErrorHandler],\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ErrorHandler,\n  inject,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  /** Subscription to the current in-progress SVG icon request. */\n  private _currentIconFetch = Subscription.EMPTY;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>, private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation,\n      // @breaking-change 9.0.0 _errorHandler parameter to be made required\n      @Optional() private readonly _errorHandler?: ErrorHandler) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      this._currentIconFetch.unsubscribe();\n\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n            .pipe(take(1))\n            .subscribe(svg => this._setSvgElement(svg), (err: Error) => {\n              const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n              // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n              if (this._errorHandler) {\n                this._errorHandler.handleError(new Error(errorMessage));\n              } else {\n                console.error(errorMessage);\n              }\n            });\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._currentIconFetch.unsubscribe();\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n\n  static ngAcceptInputType_inline: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}