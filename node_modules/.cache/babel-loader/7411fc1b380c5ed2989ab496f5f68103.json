{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs'; // import { JwtService } from './jwt.service';\n\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  formatErrors(error) {\n    return throwError(error.error);\n  }\n\n  get(path, params = new HttpParams()) {\n    return this.http.get(`${environment.api_url}${path}`, {\n      params\n    }).pipe(catchError(this.formatErrors));\n  }\n\n  put(path, body = {}, http) {\n    return this.http.put(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.formatErrors));\n  }\n\n  post(path, body = {}) {\n    return this.http.post(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.formatErrors));\n  }\n\n  delete(path) {\n    return this.http.delete(`${environment.api_url}${path}`).pipe(catchError(this.formatErrors));\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nApiService.ɵprov = i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(ApiService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})();","map":{"version":3,"sources":["/Users/sainzayab/Desktop/project/type-writer/src/app/core/services/api.service.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,WAAT,QAA4B,mCAA5B;AACA,SAAkC,UAAlC,QAAoD,sBAApD;AACA,SAAuB,UAAvB,QAAyC,MAAzC,C,CACA;;AACA,SAAS,UAAT,QAAkC,gBAAlC;;;AAGA,OAAM,MAAO,UAAP,CAAiB;AAErB,EAAA,WAAA,CACU,IADV,EAC0B;AAAhB,SAAA,IAAA,GAAA,IAAA;AAIT;;AAEO,EAAA,YAAY,CAAC,KAAD,EAAW;AAC7B,WAAQ,UAAU,CAAC,KAAK,CAAC,KAAP,CAAlB;AACD;;AAED,EAAA,GAAG,CAAC,IAAD,EAAe,MAAA,GAAqB,IAAI,UAAJ,EAApC,EAAoD;AACrD,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,GAAG,WAAW,CAAC,OAAO,GAAG,IAAI,EAA3C,EAA+C;AAAE,MAAA;AAAF,KAA/C,EACJ,IADI,CACC,UAAU,CAAC,KAAK,YAAN,CADX,CAAP;AAED;;AAED,EAAA,GAAG,CAAC,IAAD,EAAe,IAAA,GAAe,EAA9B,EAAkC,IAAlC,EAAsC;AACvC,WAAO,KAAK,IAAL,CAAU,GAAV,CACL,GAAG,WAAW,CAAC,OAAO,GAAG,IAAI,EADxB,EAEL,IAAI,CAAC,SAAL,CAAe,IAAf,CAFK,EAGL,IAHK,CAGA,UAAU,CAAC,KAAK,YAAN,CAHV,CAAP;AAID;;AAED,EAAA,IAAI,CAAC,IAAD,EAAe,IAAA,GAAe,EAA9B,EAAgC;AAClC,WAAO,KAAK,IAAL,CAAU,IAAV,CACL,GAAG,WAAW,CAAC,OAAO,GAAG,IAAI,EADxB,EAEL,IAAI,CAAC,SAAL,CAAe,IAAf,CAFK,EAGL,IAHK,CAGA,UAAU,CAAC,KAAK,YAAN,CAHV,CAAP;AAID;;AAED,EAAA,MAAM,CAAC,IAAD,EAAK;AACT,WAAO,KAAK,IAAL,CAAU,MAAV,CACL,GAAG,WAAW,CAAC,OAAO,GAAG,IAAI,EADxB,EAEL,IAFK,CAEA,UAAU,CAAC,KAAK,YAAN,CAFV,CAAP;AAGD;;AApCoB;;;mBAAV,U,EAAU,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAV,U;AAAU,EAAA,OAAA,EAAV,UAAU,CAAA;;;;;uBAAV,U,EAAU,CAAA;UADtB;AACsB,GAAA,C","sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable ,  throwError } from 'rxjs';\n// import { JwtService } from './jwt.service';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable()\nexport class ApiService {\n\n  constructor(\n    private http: HttpClient,\n    // private jwtService: JwtService\n  ) {\n\n  }\n\n  private formatErrors(error: any) {\n    return  throwError(error.error);\n  }\n\n  get(path: string, params: HttpParams = new HttpParams(),): Observable<any> {\n    return this.http.get(`${environment.api_url}${path}`, { params })\n      .pipe(catchError(this.formatErrors));\n  }\n\n  put(path: string, body: Object = {}, http): Observable<any> {\n    return this.http.put(\n      `${environment.api_url}${path}`,\n      JSON.stringify(body)\n    ).pipe(catchError(this.formatErrors));\n  }\n\n  post(path: string, body: Object = {}): Observable<any> {\n    return this.http.post(\n      `${environment.api_url}${path}`,\n      JSON.stringify(body)\n    ).pipe(catchError(this.formatErrors));\n  }\n\n  delete(path): Observable<any> {\n    return this.http.delete(\n      `${environment.api_url}${path}`\n    ).pipe(catchError(this.formatErrors));\n  }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}